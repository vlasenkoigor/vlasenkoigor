{"version":3,"sources":["logo.svg","Localization.js","TextConstants.js","context.js","components/Header.jsx","components/Footer.jsx","NGTFormatterService.js","configs/gameConfig.js","GameState.js","components/Summary.jsx","components/Buttons.jsx","components/GameConfiguration.jsx","components/Content.jsx","components/Screen.jsx","initLocalization.js","App.js","reportWebVitals.js","index.js"],"names":["Localization","Error","data","JSON","parse","key","placeholders","text","undefined","length","replacePlaceholders","i","replace","RegExp","match","AppContext","React","createContext","headerStyle","width","height","lineHeight","position","textAlign","fontSize","backgroundColor","paddingLeft","margin","Header","this","context","appData","playMode","isFreeGame","gameName","namePlaceHolder","getText","TEXTS","GAME_NAME_PLACEHOLDER","gameHeader","GAME_HEADER","textSuffix","DEMO_MODE","MONEY_MODE","FREE_GAMES","document","title","style","id","Component","contextType","footerContainer","Footer","params","lastFocusRef","createRef","openGameHelpCmd","backToLobbyCmd","type","role","onClick","value","GAME_RULES","ref","BACK_TO_LOBBY","instance","_options","active","formatCurrency","_format","bind","formatNumber","_formatNumber","toFixed","_toFixed","options","num","prec","precision","_getPrecision","formatted","_addCurrencySymbol","str","symbol","separator","thousand","decimal","negative","base","parseInt","Math","abs","mod","first","substr","second","third","split","toString","exp","Number","rounded","round","Object","seal","GAME_TYPE","summaryStyle","color","marginLeft","marginBottom","summarySmallStyle","GAME_TYPE_INSTRUCTIONS_MAPPING","textKey","GAME_INSTRUCTIONS_CHOOSE_YOUR_PRIZE","GAME_INSTRUCTIONS_SINGLE_VALUE","Summary","gameState","isHistory","GAME_STATE","LOADING_HISTORY","getInstructionsText","WAITING_FOR_SERVER_RESPONSE","getHistorySummaryText","getSummaryText","gameType","isKenoGame","isHiLo","isSingleTicketCostValueGame","instructionsKey","getInstructionsForGameType","GAME_INSTRUCTIONS_KENO","GAME_INSTRUCTIONS_HILO","FREE_GAMES_GAME_INSTRUCTION","GAME_INSTRUCTIONS","gameConfig","summaryTextKeyPrefix","totalWin","serialNumber","balance","summaryTextKeySuffix","WIN_PRIZE_AMOUNT_PLACEHOLDER","NGTFormatterService","SERIAL_NUMBER_PLACEHOLDER","BALANCE_PLACEHOLDER","totalCost","isWin","GAME_HISTORY_GENERAL","GAME_HISTORY_WINNING","GAME_HISTORY_LOSING","BACK_TO_LOBBY_INSTRUCTIONS","TOTAL_COST_PLACEHOLDER","envType","includes","console","log","map","item","Buttons","props","playButtonInput","focusPlayButtonInput","current","focus","prevProps","prevState","snapshot","enabled","startRound","actions","renderSwitchToMoneyButton","renderHiLoButtons","PLAY_BUTTON","disabled","aria-label","PLAY_FOR_TOTAL_COST","YOUR_CURRENT_BALANCE","autoFocus","startHiRound","startLoRound","startEqRound","currentNumber","hiLoData","Fragment","HI_BUTTON_HILO","display","LO_BUTTON_HILO","EQ_BUTTON_HILO","switchToMoneyCommand","MOVE_TO_MONEY_GAME","GameConfiguration","firstFocusRef","event","onSelectPrizeValueChanged","target","onTicketNumberChange","onTicketCostChange","ticketCostRange","selectedIndex","onAmountNumbersToRandomChange","setTimeout","ticketCost","ticketNumber","amountToRandom","selectedPrize","ticketsRange","amountNumbersRandomRange","selectedPrizesRange","isChooseYouPrizeGame","className","FormGroup","controlId","ControlLabel","SELECT_YOUR_PRIZE_TITLE","FormControl","onChange","inputRef","componentClass","NUMBER_OF_TICKETS","onTicketSelectorValueChanged","NUMBER_OF_TICKETS_KENO","onAmountToRandomSelectorChanged","TICKET_COST","onBetSelectorValueChanged","TOTAL_COST","BALANCE","PREV_NUMBER_HILO","prevNumber","CURRENT_NUMBER_HILO","contentStyle","minHeight","paddingTop","Content","screenStyle","background","padding","srOnly","overflow","clip","border","Screen","api","initialData","createAPI","state","addEventListener","shiftKey","keyCode","activeElement","refs","content","gameConfiguration","preventDefault","footer","onBetReceived","onGameStarted","setHistory","setTotalCost","setTicketNumber","setTicketCost","setAmountNumbersToRandomChange","disable","enable","setState","Provider","aria-labelledby","aria-describedby","DIALOG_START","DIALOG_END","init","stringify","translations","App","_","url","link","createElement","rel","href","getElementsByTagName","appendChild","additionalGameData","getRemainingFreeGames","Date","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.3c554e0e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","/**\r\n * @class Localization se\r\n * @classdesc Service class for text translation\r\n * */\r\nclass Localization {\r\n    constructor(){\r\n        throw new Error('Localization is singleton class');\r\n    }\r\n\r\n    /**\r\n     * Initializes with the raw string in json format\r\n     * @param  data - text object\r\n     */\r\n    static init(data){\r\n        Localization.data = JSON.parse(data);\r\n    }\r\n\r\n    /**\r\n     * Get translated text\r\n     * @param {string} key - text id to translate\r\n     * @param {string} placeholders - placeholders to change\r\n     * @example Localization.getText('TEXT_ID', 'text', 'other text1');\r\n     * @returns {string} translated text\r\n     */\r\n    static getText(key, ...placeholders){\r\n        if(!Localization.data) throw new Error('Localization class hasn\\'t initialized yet');\r\n\r\n        // test\r\n        let text = Localization.data[key];\r\n\r\n        //if particular text does not exist\r\n        //we return key back\r\n        if (text === undefined) return key;\r\n\r\n        //if no placeholders to be replaced return text\r\n        if(!placeholders || placeholders.length === 0) return text;\r\n\r\n        //compile template according to placeholders\r\n        const replacePlaceholders = (text, placeholders)=> {\r\n            let i = 0;\r\n            return text.replace(new RegExp(/{\\d}/, 'g'), (match)=>{\r\n                return placeholders[i] !== undefined ? placeholders[i++] : match;\r\n            });\r\n        };\r\n\r\n        return replacePlaceholders(text, placeholders);\r\n    }\r\n}\r\n\r\nexport default Localization;\r\n","export default {\r\n    \"NUMBER_OF_TICKETS\": \"NUMBER_OF_TICKETS\",\r\n    \"NUMBER_OF_TICKETS_KENO\": \"NUMBER_OF_TICKETS_KENO\",\r\n    \"TICKET_COST\": \"TICKET_COST\",\r\n    \"TOTAL_COST\": \"TOTAL_COST\",\r\n    \"DEMO_BALANCE\": \"DEMO_BALANCE\",\r\n    \"BALANCE\": \"BALANCE\",\r\n    \"PLAY_BUTTON\": \"PLAY_BUTTON\",\r\n    \"DEPOSIT_BUTTON\": \"DEPOSIT_BUTTON\",\r\n    \"GAME_RULES\": \"GAME_RULES\",\r\n    \"BACK_TO_LOBBY\": \"BACK_TO_LOBBY\",\r\n    \"DEMO_WINNING_NOTIFICATION\": \"DEMO_WINNING_NOTIFICATION\",\r\n    \"DEMO_LOSING_NOTIFICATION\": \"DEMO_LOSING_NOTIFICATION\",\r\n    \"MONEY_WINNING_NOTIFICATION\": \"MONEY_WINNING_NOTIFICATION\",\r\n    \"MONEY_LOSING_NOTIFICATION\": \"MONEY_LOSING_NOTIFICATION\",\r\n    \"WIN_PRIZE_AMOUNT_PLACEHOLDER\": \"WIN_PRIZE_AMOUNT_PLACEHOLDER\",\r\n    \"GAME_NAME_PLACEHOLDER\": \"GAME_NAME_PLACEHOLDER\",\r\n    \"SERIAL_NUMBER_PLACEHOLDER\": \"SERIAL_NUMBER_PLACEHOLDER\",\r\n    \"BALANCE_PLACEHOLDER\": \"BALANCE_PLACEHOLDER\",\r\n    \"GAME_HISTORY_GENERAL\": \"GAME_HISTORY_GENERAL\",\r\n    \"GAME_HISTORY_LOSING\": \"GAME_HISTORY_LOSING\",\r\n    \"GAME_HISTORY_WINNING\": \"GAME_HISTORY_WINNING\",\r\n    \"TOTAL_COST_PLACEHOLDER\": \"TOTAL_COST_PLACEHOLDER\",\r\n    \"GAME_HEADER\": \"GAME_HEADER\",\r\n    \"LOADING_HISTORY\": \"LOADING_HISTORY\",\r\n    \"BACK_TO_LOBBY_INSTRUCTIONS\": \"BACK_TO_LOBBY_INSTRUCTIONS\",\r\n    \"GAME_INSTRUCTIONS\": \"GAME_INSTRUCTIONS\",\r\n    \"GAME_INSTRUCTIONS_KENO\": \"GAME_INSTRUCTIONS_KENO\",\r\n    \"GAME_INSTRUCTIONS_HILO\": \"GAME_INSTRUCTIONS_HILO\",\r\n    \"HI_BUTTON_HILO\": \"HI_BUTTON_HILO\",\r\n    \"LO_BUTTON_HILO\": \"LO_BUTTON_HILO\",\r\n    \"EQ_BUTTON_HILO\": \"EQ_BUTTON_HILO\",\r\n    \"PREV_NUMBER_HILO\": \"PREV_NUMBER_HILO\",\r\n    \"CURRENT_NUMBER_HILO\": \"CURRENT_NUMBER_HILO\",\r\n    \"MONEY_WINNING_NOTIFICATION_HILO\": \"MONEY_WINNING_NOTIFICATION_HILO\",\r\n    \"MONEY_LOSING_NOTIFICATION_HILO\": \"MONEY_LOSING_NOTIFICATION_HILO\",\r\n    \"FREE_GAMES_WINNING_NOTIFICATION_HILO\": \"FREE_GAMES_WINNING_NOTIFICATION_HILO\",\r\n    \"FREE_GAMES_LOSING_NOTIFICATION_HILO\": \"FREE_GAMES_LOSING_NOTIFICATION_HILO\",\r\n    \"GAME_INSTRUCTIONS_SINGLE_VALUE\": \"GAME_INSTRUCTIONS_SINGLE_VALUE\",\r\n    \"DEMO_MODE\":\"DEMO_MODE\",\r\n    \"MONEY_MODE\": \"MONEY_MODE\",\r\n    \"MOVE_TO_MONEY_GAME\" : \"MOVE_TO_MONEY_GAME\",\r\n    \"WAITING_FOR_SERVER_RESPONSE\":\"WAITING_FOR_SERVER_RESPONSE\",\r\n    \"FREE_GAMES\":\"FREE_GAMES\",\r\n    \"FREE_GAMES_GAME_INSTRUCTION\": \"FREE_GAMES_GAME_INSTRUCTION\",\r\n    \"FREE_GAMES_WINNING_NOTIFICATION\": \"FREE_GAMES_WINNING_NOTIFICATION\",\r\n    \"FREE_GAMES_LOSING_NOTIFICATION\": \"FREE_GAMES_LOSING_NOTIFICATION\",\r\n    \"FREE_GAMES_REMAINING_GAMES_PLACEHOLDER\": \"FREE_GAMES_REMAINING_GAMES_PLACEHOLDER\",\r\n    \"PLAY_FOR_TOTAL_COST\":\"PLAY_FOR_TOTAL_COST\",\r\n    \"YOUR_CURRENT_BALANCE\":\"YOUR_CURRENT_BALANCE\",\r\n    \"DIALOG_END\":\"DIALOG_END\",\r\n    \"DIALOG_START\": \"DIALOG_START\",\r\n    \"SELECT_YOUR_PRIZE_TITLE\": \"SELECT_YOUR_PRIZE_TITLE\",\r\n    \"GAME_INSTRUCTIONS_CHOOSE_YOUR_PRIZE\": \"GAME_INSTRUCTIONS_CHOOSE_YOUR_PRIZE\"\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nexport const AppContext = React.createContext(null);\r\n","import React from 'react';\r\nimport Localization from '../Localization'\r\nimport TEXTS from \"../TextConstants\";\r\nimport {AppContext} from \"../context\";\r\n\r\nconst headerStyle = {\r\n    width: '100%',\r\n    height: '50px',\r\n    lineHeight: '50px',\r\n    position:'relative',\r\n    textAlign: 'left',\r\n    fontSize: '30px',\r\n    backgroundColor: '#F2F2F2',\r\n    paddingLeft: '2%',\r\n    margin: '0px'\r\n};\r\n\r\n class Header extends React.Component {\r\n\r\n    render() {\r\n        const { playMode, isFreeGame, gameName } = this.context.appData;\r\n\r\n        let namePlaceHolder = Localization.getText(TEXTS.GAME_NAME_PLACEHOLDER);\r\n        let gameHeader = Localization.getText(TEXTS.GAME_HEADER);\r\n        let textSuffix = playMode === \"D\" ? Localization.getText(TEXTS.DEMO_MODE) : Localization.getText(TEXTS.MONEY_MODE);\r\n        if (isFreeGame) {\r\n            textSuffix = Localization.getText(TEXTS.FREE_GAMES);\r\n        }\r\n\r\n        gameHeader = gameHeader.replace(namePlaceHolder, gameName) + textSuffix;\r\n\r\n        document.title = gameHeader;\r\n\r\n        return (\r\n            <h1 style={headerStyle} id=\"dialog-title\">\r\n                {gameHeader}\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nHeader.contextType = AppContext;\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport Localization from '../Localization'\r\nimport TEXTS from \"../TextConstants\";\r\nimport './buttons.scss';\r\nimport {AppContext} from \"../context\";\r\n\r\nconst footerContainer = {\r\n    width: '100%',\r\n    height: '50px',\r\n    position:'relative',\r\n    backgroundColor: '#ffffff'\r\n};\r\n\r\nclass Footer extends React.Component {\r\n    constructor(...params){\r\n        super(...params);\r\n        this.lastFocusRef = React.createRef();\r\n    }\r\n\r\n    render() {\r\n        const {openGameHelpCmd, backToLobbyCmd} = this.context.appData;\r\n        return (\r\n        <div style={footerContainer}>\r\n            <div>\r\n                <input\r\n                    type=\"button\"\r\n                    role=\"link\"\r\n                    id=\"gameHelpButtonStyle\"\r\n                    onClick={openGameHelpCmd}\r\n                    value={Localization.getText(TEXTS.GAME_RULES)}\r\n                />\r\n\r\n                <input\r\n                    type=\"button\"\r\n                    id=\"lobbyButtonStyle\"\r\n                    ref={this.lastFocusRef}\r\n                    onClick={backToLobbyCmd}\r\n                    value={Localization.getText(TEXTS.BACK_TO_LOBBY)}\r\n                />\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nFooter.contextType = AppContext;\r\nexport default Footer;\r\n","/**\r\n * Created by alav on 3/15/2018.\r\n */\r\n/**\r\n * Service that formats numbers using provided options\r\n */\r\nclass NGTFormatterService {\r\n\r\n    constructor() {\r\n        this._options = null;\r\n        this.active = false;\r\n        this.formatCurrency = this._format.bind(this);\r\n        this.formatNumber = this._formatNumber.bind(this);\r\n        this.toFixed = this._toFixed.bind(this);\r\n    }\r\n\r\n    /**\r\n     * It initializes the service with options\r\n     * @param options {object} -\r\n     */\r\n    init(options) {\r\n        this._options = options;\r\n    }\r\n\r\n    /**\r\n     * It formats a number using provided options\r\n     * @param num {number} - a number to format\r\n     * @param [prec] {number} - precision\r\n     * @returns {string} - formatted string\r\n     */\r\n    _format(num, prec) {\r\n        const precision = prec || this._getPrecision(num);\r\n        const formatted = this._formatNumber(num, precision);\r\n        return this._addCurrencySymbol(formatted);\r\n    }\r\n\r\n    /**\r\n     * It adds currency symbol\r\n     * @param str {string} - string representing formatted number\r\n     * @returns {string} - with currency symbol added\r\n     * @private\r\n     */\r\n    _addCurrencySymbol(str) {\r\n        const position = this._options.position;\r\n        const symbol = this._options.symbol;\r\n        const separator = this._options.separator;\r\n        return position === 'L' ? `${symbol}${separator}${str}` : `${str}${separator}${symbol}`;\r\n    }\r\n\r\n    /**\r\n     * It formats number part (thousands, decimal)\r\n     * @param num {number} - a number to format\r\n     * @param precision  {number} - precision\r\n     * @returns {string} - string representing formatted number\r\n     * @private\r\n     */\r\n    _formatNumber(num, prec) {\r\n        const precision = prec || this._getPrecision(num);\r\n        const thousand = this._options.thousand;\r\n        const decimal = this._options.decimal;\r\n        const negative = num < 0 ? '-' : '';\r\n        const base = parseInt(this._toFixed(Math.abs(num || 0), precision), 10) + '';\r\n        const mod = base.length > 3 ? base.length % 3 : 0;\r\n        const first = mod ? base.substr(0, mod) + thousand : '';\r\n        const second = base.substr(mod).replace(/(\\d{3})(?=\\d)/g, '$1' + thousand);\r\n        const third = precision ? decimal + this._toFixed(Math.abs(num), precision).split('.')[1] : '';\r\n        return `${negative}${first}${second}${third}`;\r\n    }\r\n\r\n    /**\r\n     * It derives precision from the number if it's not provided as a parameter\r\n     * @param num {number}\r\n     * @returns {number} - precision\r\n     * @private\r\n     */\r\n    _getPrecision(num) {\r\n        const dec = num.toString().split('.')[1];\r\n        return dec === void(0) ? 0 : 2;\r\n    }\r\n\r\n    /**\r\n     * More advanced version of Number.prototype.toFixed method. Avoids rounding errors.\r\n     * @param value {number}\r\n     * @param precision {number}\r\n     * @returns {string}\r\n     * @private\r\n     */\r\n    _toFixed(value, prec) {\r\n        const precision = prec || this._getPrecision(value);\r\n        const exp = Number(value + 'e' + precision);\r\n        const rounded = Math.round(exp);\r\n        return Number(rounded + 'e-' + precision).toFixed(precision);\r\n    }\r\n}\r\n\r\nconst instance = new NGTFormatterService();\r\nObject.seal(instance);\r\nexport default instance;\r\n","export const GAME_TYPE = {\r\n    CHOOSE_YOUR_PRIZE: 'GAME_TYPE___CHOOSE_YOUR_PRIZE',\r\n    SINGLE_VALUE: 'GAME_TYPE___SINGLE_VALUE',\r\n    HILO: 'GAME_TYPE___HILO',\r\n    DEFAULT: 'GAME_TYPE___DEFAULT',\r\n};\r\n\r\nexport default {\r\n    1144 : {\r\n        ticketsRange: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],\r\n        defaultTickets: 20,\r\n        additionalData: {\r\n            prizes: ['2X', '5X', '10X', '20X', '50X', '100X', '200X', '500X', '1,000X', '10,000X', 'BONUS'],\r\n            selectedPrize: '2X'\r\n        },\r\n        gameType: GAME_TYPE.CHOOSE_YOUR_PRIZE,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo) => {\r\n            const selectedPrize = customInfo.selectedPrize;\r\n            const subGamesMap = {'2X' : 58, '5X' : 59, '10X' : 60, '20X' : 61, '50X':62, '100X': 63, '200X': 64, '500X': 65, '1,000X': 66, '10,000X': 67, 'BONUS':68};\r\n            let btp = \"BTP=\";\r\n\r\n            for (let i = 0; i < ticketsNumber; i++) {\r\n                let sufix = i === ticketsNumber - 1 ? '' : ';';\r\n                btp += `${subGamesMap[selectedPrize]}:${ticketCost}${sufix}`;\r\n            }\r\n            return btp;\r\n        }\r\n    },\r\n    312 : {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    1133:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //It is hard coded in this way in the GWT project as well\r\n            const btp = \"BTP=1-1,0,0=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    1132:{\r\n        ticketsRange: [3, 6, 9],\r\n        defaultTickets:9\r\n    },\r\n    431:{\r\n        ticketsRange: [3, 6, 9, 12, 15, 18],\r\n        defaultTickets:18\r\n    },\r\n    908:{\r\n        ticketsRange: [10, 20],\r\n        defaultTickets: 20\r\n    },\r\n    561:{\r\n        ticketsRange: [1,2,3,4,5,6,7],\r\n        defaultTickets: 7,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            let selections = 1;\r\n            for (let i = 0; i < customInfo.ticketsRange[customInfo.ticketsRange.length-1] - 1; i++) {\r\n                if (i < ticketsNumber - 1) {\r\n                    selections += \",1\";\r\n                }\r\n                else {\r\n                    selections += \",0\";\r\n                }\r\n            }\r\n            const btp = \"BTP=\" + ticketsNumber + \"-\" + selections + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    575:{\r\n        ticketsRange : [6, 12, 18],\r\n        defaultTickets : 18\r\n    },\r\n    1100:{\r\n        ticketsRange: [10,20],\r\n        defaultTickets: 20\r\n    },\r\n    1101:{\r\n        ticketsRange : [6, 12, 18],\r\n        defaultTickets : 18\r\n    },\r\n    1107:{\r\n        ticketsRange: [5, 10, 15, 20, 25],\r\n        defaultTickets: 25\r\n    },\r\n    1111:{\r\n        ticketsRange: [6,12,18],\r\n        defaultTickets: 18\r\n    },\r\n    1122:{\r\n        ticketsRange: [8,16,24],\r\n        defaultTickets: 24\r\n    },\r\n    1123:{\r\n        ticketsRange: [5,10,15],\r\n        defaultTickets: 15\r\n    },\r\n    1130:{\r\n        ticketsRange: [5,10,15,20],\r\n        defaultTickets: 20\r\n    },\r\n    1120:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        apiVersion: '3.02',\r\n        getADABtp: (ticketsNumber, ticketCost) => {\r\n            // '7455' is a next game template ID. It's unnecessary for ADA game, so can be hardcoded\r\n            return `BTP=${ticketsNumber}-=${ticketCost}!1`;\r\n        }\r\n    },\r\n    1121:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1\r\n    },\r\n    1114: {\r\n        ticketsRange: [5,10],\r\n        defaultTickets:10\r\n    },\r\n    1125: {\r\n        ticketsRange: [5, 10, 15, 20],\r\n        defaultTickets: 20\r\n    },\r\n    1128: {\r\n        ticketsRange: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        defaultTickets: 10,\r\n        getADABtp: (ticketsNumber, ticketCost)=> {\r\n            const redPool = createRandomPool([1, 7]);\r\n            const orangePool = createRandomPool([1, 14]);\r\n            const bluePool = createRandomPool([1, 21]);\r\n            const tickets = [];\r\n            for (let i = 0; i < ticketsNumber; i++) {\r\n                const ticket = [i+1];\r\n                const blue = generateRandomSelection(bluePool, 3).join(',');\r\n                ticket.push(blue);\r\n                const orange = generateRandomSelection(orangePool, 2).join(',');\r\n                ticket.push(orange);\r\n                const red = generateRandomSelection(redPool, 1)[0];\r\n                ticket.push(red);\r\n                tickets.push(ticket.join(';'));\r\n            }\r\n            const ticketsString = tickets.join('!');\r\n            return `BTP=${ticketsString}=${ticketCost}`;\r\n        }\r\n    },\r\n    777:{\r\n        ticketsRange: [5, 10, 15, 20, 25, 30, 35],\r\n        defaultTickets:35\r\n    },\r\n    563:{\r\n        ticketsRange: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\r\n        defaultTickets:12\r\n    },\r\n    443:{\r\n        ticketsRange: [5, 10, 15, 20],\r\n        defaultTickets:20\r\n    },\r\n    548:{\r\n        ticketsRange: [10, 20, 30],\r\n        defaultTickets:30\r\n    },\r\n    434:{\r\n        ticketsRange: [5, 10, 15],\r\n        defaultTickets:15\r\n    },\r\n    272:{\r\n        ticketsRange: [10, 20],\r\n        defaultTickets:20\r\n    },\r\n    527:{\r\n        ticketsRange: [10, 20, 30],\r\n        defaultTickets:30\r\n    },\r\n    598:{\r\n        ticketsRange: [10, 20],\r\n        defaultTickets:20\r\n    },\r\n    264:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    343:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    344:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    525:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    261:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    591:{\r\n        ticketsRange: [10, 20, 30],\r\n        defaultTickets:30\r\n    },\r\n    467:{\r\n        ticketsRange: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\r\n        defaultTickets:12\r\n    },\r\n    413:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    494:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    526:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    274:{\r\n        ticketsRange: [1, 2, 3, 4, 5, 6, 7],\r\n        defaultTickets:7\r\n    },\r\n    710:{\r\n        ticketsRange: [10, 20],\r\n        defaultTickets:20\r\n    },\r\n    259:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    457:{\r\n        ticketsRange: [1, 2, 3, 4, 5, 6],\r\n        defaultTickets:6\r\n    },\r\n    389:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.02\r\n    },\r\n    266:{\r\n        ticketsRange: [2, 4, 6, 8],\r\n        defaultTickets:8\r\n    },\r\n    386:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    549:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    490:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    390:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    392:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n\r\n    712:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    713:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    493:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    384:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //It is hard coded in this way in the GWT project as well\r\n            const btp = \"BTP=1-1,0,0=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    250:{\r\n        ticketsRange: [1, 2, 3, 4, 5],\r\n        defaultTickets: 5,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            let selections = 1;\r\n            for (let i = 0; i < customInfo.ticketsRange[customInfo.ticketsRange.length-1] - 1; i++) {\r\n                if (i < ticketsNumber - 1) {\r\n                    selections += \",1\";\r\n                }\r\n                else {\r\n                    selections += \",0\";\r\n                }\r\n            }\r\n            const btp = \"BTP=\" + ticketsNumber + \"-\" + selections + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    270:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            let selections = \"1,0,0\";\r\n            const btp = \"BTP=\" + ticketsNumber + \"-\" + selections + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    474:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //It is hard coded in this way in the GWT project as well\r\n            const btp = \"BTP=1-1,0,0=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    486:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //It is hard coded in this way in the GWT project as well\r\n            const btp = \"BTP=1-=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    273:{\r\n        ticketsRange: [1, 2, 3, 4, 5, 6, 7],\r\n        defaultTickets: 7,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            let selections = 1;\r\n            for (let i = 0; i < customInfo.ticketsRange[customInfo.ticketsRange.length-1] - 1; i++) {\r\n                if (i < ticketsNumber - 1) {\r\n                    selections += \",1\";\r\n                }\r\n                else {\r\n                    selections += \",0\";\r\n                }\r\n            }\r\n            const btp = \"BTP=\" + ticketsNumber + \"-\" + selections + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    275:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            const btp = \"BTP=1-0,1,0=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    276:{\r\n        ticketsRange: [1, 2, 3],\r\n        defaultTickets: 3,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            let selections = 1;\r\n            for (let i = 0; i < customInfo.ticketsRange[customInfo.ticketsRange.length-1] - 1; i++) {\r\n                if (i < ticketsNumber - 1) {\r\n                    selections += \",1\";\r\n                }\r\n                else {\r\n                    selections += \",0\";\r\n                }\r\n            }\r\n            const btp = \"BTP=\" + ticketsNumber + \"-\" + selections + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    249:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        getADABtp: (ticketsNumber, ticketCost)=>{\r\n            const btp = \"BTP=\" + ticketsNumber + \"-=\" + ticketCost + \"!9514\";\r\n            return btp;\r\n        }\r\n    },\r\n    412:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        apiVersion : 3.01,\r\n        getADABtp: (ticketsNumber, ticketCost)=>{\r\n            const btp = \"BTP=\" + ticketsNumber + \"-=\" + ticketCost + \"!6677!3\";\r\n            return btp;\r\n        }\r\n    },\r\n    265:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [1,2,3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        isKenoGame: true,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=1-\" + randomNumbersArr.join() + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    354:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [1,2,3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        apiVersion : 3.01,\r\n        isKenoGame: true,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=1-\" + randomNumbersArr.join() + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    1180:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        gameType: GAME_TYPE.HILO,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo) => {\r\n            const {hiLoBetType, hiLoUserNumber, expectedWinList} = customInfo;\r\n            const expectedWin = expectedWinList[ticketCost];\r\n            const prefix = `BTP=`;\r\n            const screenPart = `${hiLoUserNumber}-=${hiLoBetType}`;\r\n            const betPart = `-=${ticketCost}`;\r\n            const expectedWinPart = `-=${expectedWin}`;\r\n            return `${prefix}${screenPart}${betPart}${expectedWinPart}`;\r\n        }\r\n    },\r\n    1117:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        isKenoGame: true,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=\" + randomNumbersArr.join() + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n\r\n    1124:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        isKenoGame: true,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=\" + randomNumbersArr.join() + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    410:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [1,2,3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        isKenoGame: true,\r\n        apiVersion : 3.02,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=1-\" + randomNumbersArr.join() + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    565:{\r\n        ticketsRange: [1],\r\n        defaultTickets: 1,\r\n        amounRandomtNumbers: [1,2,3,4,5,6,7,8,9,10],\r\n        defaultAmounRandomtNumbers: 10,\r\n        apiVersion : 3.01,\r\n        isKenoGame: true,\r\n        getADABtp: (ticketsNumber, ticketCost, customInfo)=>{\r\n            //Random [ticketsNumber] unique numbers\r\n            const randomNumbersArr = [];\r\n            while(randomNumbersArr.length < customInfo.amountNumbersToRandom){\r\n                const randomNumber = getRndInteger(1,80);\r\n                if(randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n            }\r\n\r\n            const btp = \"BTP=0;\" + randomNumbersArr.join() + \";=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    470:{\r\n        ticketsRange: [2,3,4,5,6,7,8,9,10],\r\n        defaultTickets: 10,\r\n        getADABtp: (ticketsNumber, ticketCost)=> {\r\n            let ticketsData = [];\r\n            for (let i = 0; i < ticketsNumber; i++) {\r\n                //Random 5 unique numbers\r\n                const randomNumbersArr = [];\r\n                while (randomNumbersArr.length < 5) {\r\n                    const randomNumber = getRndInteger(1, 75);\r\n                    if (randomNumbersArr.indexOf(randomNumber) > -1) continue;\r\n                    randomNumbersArr[randomNumbersArr.length] = randomNumber;\r\n                }\r\n\r\n                let ticketData = randomNumbersArr.join() + \";\" + getRndInteger(1, 15);\r\n                if (i !== (ticketsNumber - 1)) {\r\n                    ticketData += \"!\" + (i + 1);\r\n                }\r\n                ticketsData[ticketsData.length] =  ticketData;\r\n            }\r\n            const btp = \"BTP=0;\" + ticketsData.join(\";\") + \"=\" + ticketCost;\r\n            return btp;\r\n        }\r\n    },\r\n    1155: {\r\n        getADABtp: (ticketsNumber, ticketCost) => {\r\n            const MAX_TICKETS = 6;\r\n            let playableTickets = [];\r\n            for (let i = 1; i <= MAX_TICKETS; i++) {\r\n                const value = parseInt(ticketsNumber) < i ? 0 : 1;\r\n                playableTickets.push(value);\r\n            }\r\n            const ticketsString = playableTickets.join(',');\r\n\r\n            return `BTP=${ticketsNumber}-${ticketsString}=${ticketCost}`;\r\n        },\r\n        ticketsRange: [1, 2, 3, 4, 5, 6],\r\n        defaultTickets: 6\r\n    },\r\n    1166: {\r\n        ticketsRange: [8, 16],\r\n        defaultTickets: 16,\r\n        apiVersion : 3.01\r\n    },\r\n    1150: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1\r\n    },\r\n    1158: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost) => `BTP=${ticketCost}`,\r\n        gameType: GAME_TYPE.SINGLE_VALUE\r\n    },\r\n    1170: {\r\n        ticketsRange: [20],\r\n        defaultTickets:20\r\n    },\r\n\r\n    1171:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n\r\n    1177: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost) => `BTP=1-1,0,0=${ticketCost}`\r\n    },\r\n\r\n    1159:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    1178: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost) => `BTP=1-1,0,0=${ticketCost}`\r\n    },\r\n    1199:{\r\n        ticketsRange: [12, 24],\r\n        defaultTickets: 24,\r\n        apiVersion : 3.03\r\n    },\r\n    1175:{\r\n        ticketsRange: [3, 6, 9],\r\n        defaultTickets: 9\r\n    },\r\n    1152: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost) => `BTP=1-1,0,0=${ticketCost}`\r\n    },\r\n    1129: {\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        getADABtp: (ticketsNumber, ticketCost) => `BTP=1-1,0,0=${ticketCost}`\r\n    },\r\n    1185:{\r\n        ticketsRange: [5,10,15,20],\r\n        defaultTickets: 20,\r\n        apiVersion : 3.03\r\n    },\r\n    1172:{\r\n        ticketsRange: [1],\r\n        defaultTickets:1,\r\n        apiVersion : 3.01\r\n    },\r\n    default:{\r\n        getADABtp: (ticketsNumber, ticketCost)=> {\r\n            const btp = \"BTP=\" + ticketsNumber + \"-=\" + ticketCost;\r\n            return btp;\r\n        },\r\n        apiVersion : 3.00,\r\n        gameType: GAME_TYPE.DEFAULT\r\n    }\r\n}\r\n\r\nfunction getRndInteger(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\r\n}\r\n\r\nfunction createRandomPool(range) {\r\n    const [head, tail] = range;\r\n    const length = tail - head + 1;\r\n    return Array.from({length}, (_, i) => head + i);\r\n}\r\n\r\nfunction shuffle(arr) {\r\n    const a = [...arr];\r\n    for (let i = a.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [a[i], a[j]] = [a[j], a[i]];\r\n    }\r\n    return a;\r\n}\r\n\r\nfunction generateRandomSelection(pool, selectionSize) {\r\n    return shuffle(pool).slice(0, selectionSize);\r\n}\r\n","export default {\r\n    beforeRound: 'beforeRound',\r\n    gameStarted: 'gameStarted',\r\n    afterBetResult: 'afterBetResult',\r\n}\r\n","import React, {Fragment} from 'react';\r\nimport Localization from '../Localization'\r\nimport TEXTS from \"../TextConstants\";\r\nimport NGTFormatterService from \"../NGTFormatterService\";\r\nimport './summary.scss';\r\nimport {GAME_TYPE} from \"../configs/gameConfig\";\r\nimport {AppContext} from \"../context\";\r\nimport GAME_STATE from '../GameState.js'\r\n\r\nconst summaryStyle = {\r\n    color:\"black\",\r\n    fontSize:'25px',\r\n    width:'90%',\r\n    marginLeft: '5%',\r\n    marginBottom:'10px'\r\n};\r\n\r\nconst summarySmallStyle = {\r\n    color:\"black\",\r\n    fontSize:'18px',\r\n    width:'90%',\r\n    marginLeft: '5%',\r\n};\r\n\r\nconst GAME_TYPE_INSTRUCTIONS_MAPPING = [\r\n    {type: GAME_TYPE.CHOOSE_YOUR_PRIZE, textKey: TEXTS.GAME_INSTRUCTIONS_CHOOSE_YOUR_PRIZE},\r\n    {type: GAME_TYPE.SINGLE_VALUE, textKey: TEXTS.GAME_INSTRUCTIONS_SINGLE_VALUE},\r\n];\r\n\r\nclass Summary extends React.Component {\r\n\r\n    getText() {\r\n        const {gameState, isHistory} = this.context;\r\n\r\n        let text = \"\";\r\n\r\n       if (gameState === GAME_STATE.beforeRound){\r\n            text = !isHistory ? this.getInstructionsText() : Localization.getText(TEXTS.LOADING_HISTORY);\r\n       } else if (gameState === GAME_STATE.gameStarted){\r\n           text = !isHistory ? Localization.getText(TEXTS.WAITING_FOR_SERVER_RESPONSE) : Localization.getText(TEXTS.LOADING_HISTORY);\r\n       } else if (gameState === GAME_STATE.afterBetResult){\r\n           text = !isHistory ? this.getSummaryText() : this.getHistorySummaryText();\r\n       }\r\n\r\n        //Replace remaining free games\r\n        // text = text.replace(Localization.getText(TEXTS.FREE_GAMES_REMAINING_GAMES_PLACEHOLDER), this.context.getRemainingFreeGames());\r\n\r\n\r\n        return text;\r\n    }\r\n\r\n    getInstructionsText() {\r\n        const { gameType, isKenoGame, isHiLo, isSingleTicketCostValueGame, isFreeGame } = this.context.appData;\r\n        if(gameType) {\r\n            const instructionsKey = this.getInstructionsForGameType(gameType);\r\n            if(instructionsKey) {\r\n                return Localization.getText(instructionsKey);\r\n            }\r\n        }\r\n\r\n        if (isKenoGame) {\r\n            return Localization.getText(TEXTS.GAME_INSTRUCTIONS_KENO);\r\n        }\r\n\r\n        if (isHiLo) {\r\n            return Localization.getText(TEXTS.GAME_INSTRUCTIONS_HILO);\r\n        }\r\n\r\n        if (isSingleTicketCostValueGame) {\r\n            return Localization.getText(TEXTS.GAME_INSTRUCTIONS_SINGLE_VALUE);\r\n        }\r\n\r\n        if (isFreeGame) {\r\n            return Localization.getText(TEXTS.FREE_GAMES_GAME_INSTRUCTION);\r\n        }\r\n\r\n        return Localization.getText(TEXTS.GAME_INSTRUCTIONS);\r\n    }\r\n\r\n    getInstructionsForGameType(gameType) {\r\n        for (let i = 0; i < GAME_TYPE_INSTRUCTIONS_MAPPING.length; i++) {\r\n            const gameConfig = GAME_TYPE_INSTRUCTIONS_MAPPING[i];\r\n            if (gameConfig.type === gameType) {\r\n                return gameConfig.textKey;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getSummaryText() {\r\n        const { isHiLo, isFreeGame, playMode} = this.context.appData;\r\n        const {totalWin, serialNumber, balance} = this.context;\r\n        const isWin = totalWin > 0;\r\n\r\n        let summaryTextKeyPrefix;\r\n\r\n        if (isFreeGame) {\r\n            summaryTextKeyPrefix = \"FREE_GAMES_\";\r\n        }\r\n        else {\r\n            summaryTextKeyPrefix = (playMode === \"D\" ? \"DEMO_\" : \"MONEY_\");\r\n        }\r\n\r\n        let summaryTextKeySuffix = (isWin ? \"WINNING_\" : \"LOSING_\") + \"NOTIFICATION\";\r\n\r\n        if (isHiLo && playMode !== \"D\") {\r\n            summaryTextKeySuffix += \"_HILO\"\r\n        }\r\n\r\n        let text = Localization.getText(TEXTS[summaryTextKeyPrefix + summaryTextKeySuffix]);\r\n\r\n        text = text.replace(Localization.getText(TEXTS.WIN_PRIZE_AMOUNT_PLACEHOLDER), NGTFormatterService.formatCurrency(totalWin));\r\n        text = text.replace(Localization.getText(TEXTS.SERIAL_NUMBER_PLACEHOLDER), serialNumber);\r\n        text = text.replace(Localization.getText(TEXTS.BALANCE_PLACEHOLDER), NGTFormatterService.formatCurrency(balance));\r\n\r\n\r\n        return  text;\r\n    }\r\n\r\n    getHistorySummaryText(){\r\n        const {totalWin, totalCost, serialNumber} = this.context;\r\n        const {gameName} = this.context.appData;\r\n        const isWin = totalWin > 0;\r\n\r\n\r\n        let text = Localization.getText(TEXTS.GAME_HISTORY_GENERAL);\r\n        text += (isWin ? Localization.getText(TEXTS.GAME_HISTORY_WINNING) : Localization.getText(TEXTS.GAME_HISTORY_LOSING));\r\n        text += Localization.getText(TEXTS.BACK_TO_LOBBY_INSTRUCTIONS);\r\n\r\n\r\n        text = text.replace(Localization.getText(TEXTS.WIN_PRIZE_AMOUNT_PLACEHOLDER), NGTFormatterService.formatCurrency(totalWin));\r\n        text = text.replace(Localization.getText(TEXTS.SERIAL_NUMBER_PLACEHOLDER), serialNumber);\r\n        text = text.replace(Localization.getText(TEXTS.GAME_NAME_PLACEHOLDER), gameName);\r\n        text = text.replace(Localization.getText(TEXTS.TOTAL_COST_PLACEHOLDER), NGTFormatterService.formatCurrency(totalCost));\r\n\r\n        return text;\r\n    }\r\n\r\n    render() {\r\n        const { envType, gameType } = this.context.appData;\r\n        const { balance } = this.context;\r\n        let style = summaryStyle;\r\n        let isMobile = ['S','C'].includes((envType));\r\n        if (isMobile && gameType === GAME_TYPE.CHOOSE_YOUR_PRIZE){\r\n            style =  summarySmallStyle;\r\n        }\r\n        console.log('render Summary balance = ', balance);\r\n\r\n        const text = this.getText()\r\n        return (\r\n            <p id=\"dialog-description\" style={style}  >\r\n                {text.split('\\n').map((item, key) => {\r\n                    return <Fragment key={key}>{item}<br/></Fragment>\r\n                })}\r\n            </p>\r\n        )\r\n    }\r\n}\r\nSummary.contextType = AppContext;\r\n\r\nexport default Summary;\r\n","import React from 'react';\r\nimport Localization from '../Localization'\r\nimport TEXTS from \"../TextConstants\";\r\nimport './buttons.scss';\r\nimport {AppContext} from \"../context\";\r\nimport GAME_STATE from '../GameState'\r\nclass Buttons extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.playButtonInput = React.createRef();\r\n        this.focusPlayButtonInput = this.focusPlayButtonInput.bind(this);\r\n    }\r\n\r\n    focusPlayButtonInput() {\r\n        if (this.playButtonInput.current) {\r\n            this.playButtonInput.current.focus();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        const {gameState} = this.context;\r\n\r\n        if (gameState === GAME_STATE.afterBetResult){\r\n            this.focusPlayButtonInput();\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const {playMode, isHiLo} = this.context.appData;\r\n        const {totalCost, balance, enabled} = this.context;\r\n\r\n        const {startRound} = this.context.actions;\r\n\r\n        return (<div>\r\n            {playMode === \"D\" ? this.renderSwitchToMoneyButton() : \"\"}\r\n            {isHiLo ? (\r\n               this.renderHiLoButtons()\r\n            ) : (\r\n                <input\r\n                    value={Localization.getText(TEXTS.PLAY_BUTTON)}\r\n                    type=\"button\"\r\n                    disabled={!enabled}\r\n                    id=\"playButton\"\r\n                    aria-label={Localization.getText(TEXTS.PLAY_FOR_TOTAL_COST) + \" \" + totalCost + \". \" + Localization.getText(TEXTS.YOUR_CURRENT_BALANCE) + \" \" + balance}\r\n                    onClick={ startRound }\r\n                    autoFocus\r\n                    ref={this.playButtonInput}\r\n                >\r\n                </input>\r\n            )\r\n            }\r\n\r\n        </div>);\r\n    }\r\n\r\n    renderHiLoButtons(){\r\n        const { startHiRound, startLoRound, startEqRound } = this.context.actions;\r\n        const { enabled, hiLoData } = this.context;\r\n        const {currentNumber} = hiLoData;\r\n\r\n        return <React.Fragment>\r\n            <input\r\n                value={Localization.getText(TEXTS.HI_BUTTON_HILO)}\r\n                type=\"button\"\r\n                disabled={!enabled}\r\n                id=\"hiButton\"\r\n                style={currentNumber === 21 ? {display: 'none'} : {}}\r\n                onClick={ startHiRound }>\r\n\r\n            </input>\r\n\r\n            <input\r\n                value={Localization.getText(TEXTS.LO_BUTTON_HILO)}\r\n                type=\"button\"\r\n                disabled={!enabled}\r\n                id=\"loButton\"\r\n                style={currentNumber === 1 ? {display: 'none'} : {}}\r\n                onClick={ startLoRound }>\r\n\r\n            </input>\r\n\r\n            <input\r\n                value={Localization.getText(TEXTS.EQ_BUTTON_HILO)}\r\n                type=\"button\"\r\n                disabled={!enabled}\r\n                id=\"eqButton\"\r\n                onClick={ startEqRound }>\r\n\r\n            </input>\r\n        </React.Fragment>\r\n    }\r\n\r\n    renderSwitchToMoneyButton(){\r\n        const {enabled} = this.context;\r\n        const {switchToMoneyCommand} = this.context.appData;\r\n\r\n        return <input\r\n            value={Localization.getText(TEXTS.MOVE_TO_MONEY_GAME)}\r\n            type=\"button\"\r\n            disabled={!enabled}\r\n            id=\"switchToMoneyButton\"\r\n            onClick={switchToMoneyCommand}>\r\n        </input>\r\n    }\r\n}\r\n\r\nButtons.contextType = AppContext;\r\nexport default Buttons;\r\n","import React from 'react';\r\nimport Localization from '../Localization';\r\nimport NGTFormatterService from \"../NGTFormatterService\";\r\nimport TEXTS from \"../TextConstants\";\r\nimport {FormGroup, FormControl, ControlLabel} from 'react-bootstrap';\r\nimport './game-configuration.scss';\r\nimport {AppContext} from \"../context\";\r\n\r\nclass GameConfiguration extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.firstFocusRef = React.createRef();\r\n    }\r\n\r\n    onSelectPrizeValueChanged(event) {\r\n        const {onSelectPrizeValueChanged} = this.context.actions;\r\n        onSelectPrizeValueChanged(event.target.value);\r\n    }\r\n\r\n    onTicketSelectorValueChanged(event) {\r\n        const {onTicketNumberChange} = this.context.actions;\r\n        onTicketNumberChange(event.target.value);\r\n    }\r\n\r\n    onBetSelectorValueChanged(event) {\r\n        const {onTicketCostChange} = this.context.actions;\r\n        const {ticketCostRange} = this.context;\r\n        const value = ticketCostRange[event.target.options.selectedIndex]\r\n        onTicketCostChange(value);\r\n    }\r\n\r\n    onAmountToRandomSelectorChanged(event) {\r\n        const {onAmountNumbersToRandomChange} = this.context.actions;\r\n        onAmountNumbersToRandomChange(event.target.value)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => this.firstFocusRef.focus(), 15);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            ticketCost, ticketNumber, totalCost, amountToRandom,selectedPrize,\r\n            enabled, balance,\r\n            ticketsRange, ticketCostRange, amountNumbersRandomRange, selectedPrizesRange,\r\n            hiLoData\r\n        } = this.context;\r\n\r\n        const {isKenoGame, isHiLo, isChooseYouPrizeGame} = this.context.appData;\r\n\r\n            return (\r\n\r\n                <form className=\"game-configuration\" role=\"form\">\r\n                    <FormGroup controlId=\"selectYourPrizeId\" role=\"presentation\"\r\n                               style={ isChooseYouPrizeGame ? {} : {display: 'none'} }>\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.SELECT_YOUR_PRIZE_TITLE)}\r\n                        </ControlLabel>\r\n                        <FormControl onChange={this.onSelectPrizeValueChanged.bind(this)}\r\n                                     disabled={!enabled}\r\n                                     value={selectedPrize}\r\n                                     inputRef={ref => {if (isChooseYouPrizeGame) this.firstFocusRef = ref}}\r\n                                     componentClass=\"select\">\r\n                            {selectedPrizesRange.map((value, i)=>{\r\n                                return (<option key={`prize${i}`}>{value}</option>)\r\n                            })}\r\n                        </FormControl>\r\n                    </FormGroup>\r\n\r\n\r\n                    <FormGroup controlId=\"numberOfTicketId\" role=\"presentation\"\r\n                               style={ isKenoGame ? {display: 'none'} : {}} >\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.NUMBER_OF_TICKETS)}\r\n                        </ControlLabel>\r\n                        <FormControl onChange={this.onTicketSelectorValueChanged.bind(this)}\r\n                                     disabled={!enabled}\r\n                                     value={ticketNumber}\r\n                                     inputRef={ref => {if (!isChooseYouPrizeGame && !isKenoGame) this.firstFocusRef = ref}}\r\n                                     componentClass=\"select\">\r\n                            {ticketsRange.map((value, i)=>{\r\n                                return (<option key={\"ticketNumberRange\" + i}>{value}</option>)\r\n                            })}\r\n                        </FormControl>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"amountToRandomId\" role=\"presentation\"\r\n                               style={isKenoGame ? {} : {display: 'none'}}>\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.NUMBER_OF_TICKETS_KENO)}\r\n                        </ControlLabel>\r\n                        <FormControl onChange={this.onAmountToRandomSelectorChanged.bind(this)}\r\n                                     disabled={!enabled}\r\n                                     value={amountToRandom}\r\n                                     componentClass=\"select\">\r\n                            {amountNumbersRandomRange.map((value, i)=>{\r\n                                return (<option key={\"amountToRandomRange\" + i}>{value}</option>)\r\n                            })}\r\n                        </FormControl>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"ticketCostId\" role=\"presentation\">\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.TICKET_COST)}\r\n                        </ControlLabel>\r\n                        <FormControl onChange={this.onBetSelectorValueChanged.bind(this)}\r\n                                     disabled={!enabled}\r\n                                     value={ticketCost ? NGTFormatterService.formatCurrency(ticketCost) : \"\"}\r\n                                     componentClass=\"select\">\r\n                            {ticketCostRange.map((value, i)=>{\r\n                                return (<option key={\"ticketCostRange\" + i}>{NGTFormatterService.formatCurrency(value)}</option>)\r\n                            })}\r\n                        </FormControl>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"totalCostId\"\r\n                               style={isKenoGame ? {display: 'none'} : {}}>\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.TOTAL_COST)}\r\n                        </ControlLabel>\r\n                        <div id=\"totalCostId\" className=\"form-value\">\r\n                            {NGTFormatterService.formatCurrency(totalCost)}\r\n                        </div>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"balanceId\">\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.BALANCE)}\r\n                        </ControlLabel>\r\n                        <div id=\"balanceId\" className=\"form-value\">\r\n                            {NGTFormatterService.formatCurrency(balance)}\r\n                        </div>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"hiloPrevNumberId\" role=\"presentation\"\r\n                               style={isHiLo ? {} : {display: 'none'}}>\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.PREV_NUMBER_HILO)}\r\n                        </ControlLabel>\r\n                        <div id=\"hiloPrevNumberId\" className=\"form-value\">\r\n                            {hiLoData.prevNumber}\r\n                        </div>\r\n                    </FormGroup>\r\n\r\n                    <FormGroup controlId=\"hiloCurrentNumberId\" role=\"presentation\"\r\n                               style={isHiLo ? {} : {display: 'none'}}>\r\n\r\n                        <ControlLabel>\r\n                            {Localization.getText(TEXTS.CURRENT_NUMBER_HILO)}\r\n                        </ControlLabel>\r\n                        <div id=\"hiloCurrentNumberId\" className=\"form-value\">\r\n                            {hiLoData.currentNumber}\r\n                        </div>\r\n                    </FormGroup>\r\n                </form>\r\n            );\r\n\r\n    }\r\n}\r\n\r\nGameConfiguration.contextType = AppContext;\r\n\r\nexport default GameConfiguration;\r\n","import React, {Fragment} from 'react';\r\nimport Summary from './Summary.jsx';\r\nimport Buttons from './Buttons.jsx';\r\nimport GameConfiguration from './GameConfiguration.jsx';\r\nimport {AppContext} from \"../context\";\r\n\r\nconst contentStyle = {\r\n    width: '100%',\r\n    height: '85%',\r\n    minHeight: '85%',\r\n    backgroundColor: 'white',\r\n    paddingTop: '2%'\r\n};\r\n\r\nclass Content extends React.Component {\r\n\r\n    render() {\r\n        const {isHistory} = this.context;\r\n\r\n        return (\r\n        <div style={contentStyle}>\r\n            <Summary/>\r\n            {\r\n            !isHistory ? (\r\n                <Fragment>\r\n                    <GameConfiguration  ref=\"gameConfiguration\"/>\r\n                    <Buttons />\r\n                </Fragment>\r\n\r\n            ) : ''\r\n            }\r\n\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nContent.contextType = AppContext;\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Header from './Header.jsx';\r\nimport Footer from './Footer.jsx';\r\nimport Content from './Content.jsx';\r\nimport Localization from '../Localization'\r\nimport TEXTS from \"../TextConstants\";\r\nimport './externalCss.scss';\r\nimport {AppContext} from \"../context\";\r\nimport GAME_STATE from '../GameState'\r\n\r\nconst screenStyle = {\r\n    width: '100%',\r\n    height: '100%',\r\n    textAlign: 'center',\r\n    display: 'block',\r\n    background: 'transparent',\r\n    padding: '0px'\r\n};\r\n\r\nconst srOnly = {\r\n    position: 'absolute',\r\n    width: '1px',\r\n    height: '1px',\r\n    padding: '0',\r\n    margin: '-1px',\r\n    overflow: 'hidden',\r\n    clip: 'rect(0,0,0,0)',\r\n    border: '0'\r\n};\r\n\r\nclass Screen extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const {appData, api, actions, initialData} = props;\r\n\r\n        this.createAPI(api);\r\n\r\n        this.state = {\r\n            gameState : GAME_STATE.beforeRound,\r\n            isHistory : false,\r\n            serialNumber : '',\r\n            totalWin : 0,\r\n            balance : initialData.balance || 0,\r\n            totalCost : initialData.totalCost || 0,\r\n            ticketNumber : initialData.ticketNumber || 0,\r\n            ticketCost : initialData.ticketCost || 0,\r\n            selectedPrize : initialData.selectedPrize || 0,\r\n            amountToRandom : initialData.amountToRandom || 0,\r\n            ticketsRange : initialData.ticketsRange || [],\r\n            ticketCostRange : initialData.ticketCostRange || [],\r\n            amountNumbersRandomRange : initialData.amountNumbersRandomRange || [],\r\n            selectedPrizesRange : initialData.selectedPrizesRange || [],\r\n            hiLoData : initialData.hiLoData || {},\r\n            enabled : true,\r\n            appData,\r\n            actions\r\n        };\r\n\r\n        document.addEventListener('keydown', (event) => {\r\n            if(event.shiftKey && event.keyCode === 9) {\r\n                //shift was down when tab was pressed\r\n                if (document.activeElement === this.refs.content.refs.gameConfiguration.firstFocusRef) {\r\n                    event.preventDefault();\r\n                    this.refs.footer.lastFocusRef.current.focus();\r\n                }\r\n            }\r\n            else if (event.keyCode === 9) {\r\n                if (document.activeElement === this.refs.footer.lastFocusRef.current) {\r\n                    event.preventDefault();\r\n                    this.refs.content.refs.gameConfiguration.firstFocusRef.focus();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    createAPI(api){\r\n        api.onBetReceived = this.onBetReceived.bind(this);\r\n        api.onGameStarted = this.onGameStarted.bind(this);\r\n        api.setHistory = this.setHistory.bind(this);\r\n        api.setTotalCost = this.setTotalCost.bind(this);\r\n        api.setTicketNumber = this.setTicketNumber.bind(this);\r\n        api.setTicketCost = this.setTicketCost.bind(this);\r\n        api.setAmountNumbersToRandomChange = this.setAmountNumbersToRandomChange.bind(this);\r\n        api.onSelectPrizeValueChanged = this.onSelectPrizeValueChanged.bind(this);\r\n        api.disable = this.disable.bind(this);\r\n        api.enable = this.enable.bind(this);\r\n    }\r\n\r\n\r\n    onGameStarted(){\r\n        this.setState({\r\n            gameState : GAME_STATE.gameStarted,\r\n        })\r\n    }\r\n\r\n\r\n    onBetReceived({serialNumber, totalWin, balance, hiLoData}){\r\n        this.setState({gameState : GAME_STATE.afterBetResult})\r\n        this.setState({serialNumber : serialNumber})\r\n        this.setState({totalWin : totalWin})\r\n        this.setState({balance : balance})\r\n        this.setState({hiLoData : hiLoData})\r\n    }\r\n\r\n    setHistory(){\r\n        this.setState({isHistory : true})\r\n    }\r\n\r\n    setTotalCost(totalCost){\r\n        this.setState({totalCost})\r\n    }\r\n\r\n    setTicketNumber(ticketNumber){\r\n        this.setState({ticketNumber})\r\n    }\r\n\r\n    setTicketCost(ticketCost){\r\n        this.setState({ticketCost})\r\n    }\r\n\r\n    setAmountNumbersToRandomChange(amountToRandom){\r\n        this.setState({amountToRandom})\r\n    }\r\n\r\n    onSelectPrizeValueChanged(selectedPrize){\r\n        this.setState({selectedPrize})\r\n    }\r\n\r\n    disable(){\r\n        this.setState({enabled : false})\r\n    }\r\n\r\n    enable(){\r\n        this.setState({enabled : true})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <AppContext.Provider value={this.state}>\r\n                    <dialog style={screenStyle} className=\"dialog\" aria-labelledby=\"dialog-title\" aria-describedby=\"dialog-description\">\r\n                        <p style={srOnly}>{Localization.getText(TEXTS.DIALOG_START)}</p>\r\n                        <Header />\r\n                        <Content ref=\"content\"/>\r\n                        <Footer  ref=\"footer\"/>\r\n                        <p style={srOnly}>{Localization.getText(TEXTS.DIALOG_END)}</p>\r\n                    </dialog>\r\n            </AppContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nScreen.propTypes = {\r\n    contextData: PropTypes.object,\r\n    api: PropTypes.objectOf(PropTypes.func),\r\n    actions: PropTypes.objectOf(PropTypes.func),\r\n    initialData: PropTypes.object\r\n}\r\n\r\nexport default Screen;\r\n","import Localization from \"./Localization\";\r\nimport data from './ENU_ADA.json'\r\n\r\nconsole.log(data)\r\nLocalization.init(JSON.stringify(data.translations))\r\n","import logo from './logo.svg';\nimport Screen from './components/Screen'\n\nimport NGTFormatterService from './NGTFormatterService'\nimport React from \"react\";\nimport './initLocalization';\n\nNGTFormatterService.init({\n    decimal: \".\",\n    position: \"L\",\n    separator: \"\",\n    symbol: \"$\",\n    thousand: \",\"\n})\n\n\nfunction App() {\n\n\n\n  const api = {\n      onGameStarted : _ => {},\n      onBetReceived : _ => {},\n      setHistory : _ => {},\n      setTotalCost : _ => {},\n      setTicketNumber : _ => {},\n      setTicketCost : _ => {},\n      setAmountNumbersToRandomChange : _ => {},\n      onSelectPrizeValueChanged : _ => {},\n      disable : _ => {},\n      enable : _ => {}\n  }\n\n  function createAppData() {\n      return  {\n          envType: \"W\",\n          gameName : \"Game Name\",\n          playMode: \"M\",\n          isFreeGame: false,\n          isKenoGame: false,\n          isHiLo: false,\n          isChooseYouPrizeGame: false,\n          isSingleTicketCostValueGame: false,\n          gameType: \"GAME_TYPE___DEFAULT\",\n          additionalGameData: {},\n          backToLobbyCmd: ()=>{},\n          openGameHelpCmd: ()=>{},\n          switchToMoneyCommand : ()=>{},\n          getRemainingFreeGames: ()=>{},\n      }\n  }\n\n    function createActionsApi(){\n        return {\n            startRound : ()=>{\n                api.onGameStarted();\n                setTimeout(()=>{\n                    const serialNumber = 0,\n                        totalWin = 10,\n                        balance = +new Date(),\n                        hiLoData = {};\n\n                    api.onBetReceived({serialNumber, totalWin, balance, hiLoData})\n\n                }, 1000)\n            },\n            startHiRound : ()=>{},\n            startLoRound : ()=>{},\n            startEqRound : ()=>{},\n            onTicketNumberChange : ()=>{},\n            onTicketCostChange : ()=>{},\n            onSelectPrizeValueChanged : ()=>{},\n            onAmountNumbersToRandomChange : ()=>{},\n        }\n    }\n\n    function getInitialData(){\n        return {\n            balance : 100,\n            totalCost : 1,\n            ticketNumber : 1,\n            ticketCost : 1,\n            ticketsRange : [1, 2,3,4,5,6,7,8],\n            ticketCostRange : [1, 2,3,4,5,6,7,8],\n            selectedPrizesRange : [1, 2,3,4,5,6,7,8],\n            selectedPrize : 1,\n            amountToRandom : 1,\n            amountNumbersRandomRange : [],\n            hiLoData : {}\n        }\n    }\n\n    (function loadCss(url) {\n        const link = document.createElement(\"link\");\n        link.type = \"text/css\";\n        link.rel = \"stylesheet\";\n        link.href = url;\n        document.getElementsByTagName(\"head\")[0].appendChild(link);\n    })('https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css')\n\n\n  return (\n      <Screen\n          appData = {createAppData()}\n          actions = {createActionsApi()}\n          api = {api}\n          initialData = {getInitialData()}\n      />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}